"use strict";var _slicedToArray=function(e,r){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){for(var a,s=[],t=e[Symbol.iterator]();!(a=t.next()).done&&(s.push(a.value),!r||s.length!==r););return s}throw new TypeError("Invalid attempt to destructure non-iterable instance")};!function(){function e(e){function r(r,a,s){function t(){r.$broadcast("awesomeSort.resetClass")}function n(r,a,t,n){return a=(a||"").toLowerCase(),t||n?t?a?e("filter")(r,function(e){return t.some(function(r){return r=(s(r)(e)||"").toLowerCase(),r.indexOf(a)>-1})}):r:n(r,a)||[]:e("filter")(r,a)||[]}var o=this;this.page=0,this.perPage=-1,this.resetSortClasses=t,r.$watch(function(){return[o.items,o.search,o.sort,o.reverse,o.page,o.perPage,o.searchFields,o.searchFn]},function(r){var a=_slicedToArray(r,8),s=a[0],t=a[1],i=a[2],c=a[3],l=a[4],u=a[5],p=a[6],d=a[7],g=n(s,t,p,d);o.filtered=e("orderBy")(g,i,c);var h=l*u,m=h+u;o.displayed=o.filtered.slice(h,m)},!0)}return r.$inject=["$scope","$attrs","$parse"],{scope:{items:"=",displayed:"="},transclude:!0,replace:!0,template:'<div class="awesome-list" ng-transclude></div>',controller:r,controllerAs:"awl",bindToController:!0}}angular.module("awesomeList",[]).directive("awesomeList",e),e.$inject=["$filter","$parse"]}(),function(){function e(){function e(e,r,a,s){function t(r){0>r?r=0:r>=e.pageCount&&(r=e.pageCount-1),e.curPage=s.page=r}function n(e,r){for(var a=[],s=e;r>s;s++)a.push(s);return a}e.curPage=s.page=0,s.perPage=10,e.jump=t,e.$watch(function(){return s.filtered.length},function(r){e.pageCount=Math.ceil(r/s.perPage),e.pages=n(0,e.pageCount),t(s.page)})}return{require:"^awesomeList",scope:{},template:'\n                <div class="awesome-pagination">\n                    <span ng-click="jump(curPage - 1)">&laquo;</span>\n                    <span ng-click="jump(page)" ng-repeat="page in pages" ng-class="{ selected: curPage == page }">{{ page + 1 }}</span>\n                    <span ng-click="jump(curPage + 1)">&raquo;</span>\n                </div>\n            ',link:e}}angular.module("awesomeList").directive("awesomePagination",e)}(),function(){function e(){function e(e,r,a,s){if(e.update=function(e){s.search=e},e.searchFields&&e.searchFn)throw"awesomeSearch Directive: Attributes [searchFields] and [searchFn] are mutually exclusive. Use one or the other.";console.log(e.searchFields,e.searchFn),e.searchFn?s.searchFn=e.searchFn:e.searchFields&&e.$watch("searchFields",function(e){return s.searchFields=e})}return{require:"^awesomeList",scope:{searchFields:"=?",searchFn:"&?"},replace:!0,template:'<input placeholder="Search" type="search" class="awesome-search" ng-model="search" ng-change="update(search)">',link:e}}angular.module("awesomeList").directive("awesomeSearch",e),e.$inject=["$parse"]}(),function(){function e(){function e(e,r){e.$on("awesomeSort.resetClass",function(){r.removeClass(""+a+" "+s)})}function r(e,r,n,o){r.addClass(t),r.bind("click",function(){e.$apply(function(){o.sort==n.awesomeSort?(o.reverse=!o.reverse,r.toggleClass(s,o.reverse)):(o.reverse=!1,o.sort=n.awesomeSort,o.resetSortClasses(),r.addClass(a))})})}var a="awesome-sorted",s="awesome-sorted-reverse",t="awesome-sortable";return e.$inject=["$scope","$element"],{require:"^awesomeList",scope:{},controller:e,link:r}}angular.module("awesomeList").directive("awesomeSort",e)}();